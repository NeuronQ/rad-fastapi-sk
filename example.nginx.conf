upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn-yourthing-api.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
}

server {
    server_name yourthing.app www.yourthing.app;

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot

    ssl_certificate /etc/letsencrypt/live/yourthing.app/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/yourthing.app/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    keepalive_timeout 5;

    location = / {
        root /opt/yourthing/poc-frontend/public;
        try_files /index.html =404;
    }

    location / {
        root /opt/yourthing/poc-frontend/public;
        index index.html;
        try_files $uri /index.html =404;
    }

    location /api/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_buffering off;

        proxy_pass http://app_server;
    }

    error_page 404 /404.html;
    location = /404.html {
        root /opt/yourthing/poc-frontend/public;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /opt/yourthing/poc-frontend/public;
    }
}

server {
    server_name yourthing.app www.yourthing.app;

    listen 80;
    listen [::]:80;

    if ($host = yourthing.app) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    return 404; # managed by Certbot
}

